<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>前端常用方法积累</title>
      <link href="2020/10/08/commonMethod/"/>
      <url>2020/10/08/commonMethod/</url>
      
        <content type="html"><![CDATA[<h3 id="三运算"><a href="#三运算" class="headerlink" title="三运算"></a>三运算</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let arr &#x3D; 5 &gt; 3 ? 6 : 5</span><br><span class="line">&#x2F;&#x2F; 表达式判断 ？ 真 ： 假</span><br><span class="line">   6     5</span><br><span class="line">console.log(arr)</span><br></pre></td></tr></table></figure><h3 id="多层判断表单提交"><a href="#多层判断表单提交" class="headerlink" title="多层判断表单提交"></a>多层判断表单提交</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">approvalEndVisible () &#123;</span><br><span class="line">            let param &#x3D; &#123;</span><br><span class="line">              cityId: this.cityId,</span><br><span class="line">              houseId:this.reviewDrawingRow.houseId,</span><br><span class="line">              auditResultType: &#39;1&#39;</span><br><span class="line">            &#125;</span><br><span class="line">            this.$confirm(&#39;确认进行当前操作吗？&#39;, &#39;提示&#39;, &#123;</span><br><span class="line">                  confirmButtonText: &#39;确定&#39;,</span><br><span class="line">                  cancelButtonText: &#39;取消&#39;,</span><br><span class="line">                  type: &#39;warning&#39;</span><br><span class="line">                &#125;).then(() &#x3D;&gt; &#123;           postBehavior(&#39;&#x2F;master&#x2F;data&#x2F;actuary&#x2F;checkDesignPicture&#39;,param).then(res &#x3D;&gt; &#123;</span><br><span class="line">                      console.log(res)</span><br><span class="line">                      if (res.resultCode !&#x3D;&#x3D; 1000) &#123;</span><br><span class="line">                          return this.$message.error(res.resultMsg)</span><br><span class="line">                      &#125; </span><br><span class="line">                      this.$message(&#123;</span><br><span class="line">                        message: res.resultMsg,</span><br><span class="line">                        type: &quot;success&quot;,</span><br><span class="line">                        duration: 500,</span><br><span class="line">                        onClose: () &#x3D;&gt; &#123;</span><br><span class="line">                          this.reviewDrawingsVisible &#x3D; false</span><br><span class="line">                        &#125;</span><br><span class="line">                      &#125;);</span><br><span class="line">                  &#125;)</span><br><span class="line">                &#125;).catch(() &#x3D;&gt; &#123;</span><br><span class="line">                  this.$message(&#123;</span><br><span class="line">                      type: &#39;info&#39;,</span><br><span class="line">                      message: &#39;已取消&#39;</span><br><span class="line">                  &#125;)</span><br><span class="line">                &#125;);</span><br><span class="line">          &#125;,</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">deminingOptionsDataForm () &#123;</span><br><span class="line">      let param &#x3D; &#123;</span><br><span class="line">          houseId: this.confirmRechargeForm.houseId,</span><br><span class="line">          questionJson: JSON.stringify(this.questionJson)</span><br><span class="line">      &#125;</span><br><span class="line">      this.$confirm(&#39;请确定当前排雷信息全部填写完了？&#39;, &#39;提示&#39;, &#123;</span><br><span class="line">              confirmButtonText: &#39;确定&#39;,</span><br><span class="line">              cancelButtonText: &#39;取消&#39;,</span><br><span class="line">              type: &#39;warning&#39;</span><br><span class="line">            &#125;).then(() &#x3D;&gt; &#123;</span><br><span class="line">              let bool &#x3D; true;</span><br><span class="line">              this.deminingOptionsList.forEach(v &#x3D;&gt; &#123;</span><br><span class="line">                  if ( v.questionOptionId &#x3D;&#x3D;&#x3D; &#39;&#39;) &#123;</span><br><span class="line">                      bool &#x3D; false;</span><br><span class="line">                      return this.$message.error(&#39;请全部填写完排雷选项&#39;)</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;);</span><br><span class="line">              if  (bool) &#123;</span><br><span class="line">                  postBehavior(&#39;master&#x2F;member&#x2F;question&#x2F;setQuantityQuestion&#39;, param).then(res &#x3D;&gt; &#123;</span><br><span class="line">                              if (res.resultCode !&#x3D;&#x3D; 1000) &#123;</span><br><span class="line">                                  return this.$message.error(res.resultMsg)</span><br><span class="line">                              &#125; </span><br><span class="line">                              this.$message(&#123;</span><br><span class="line">                                  message: res.resultMsg,</span><br><span class="line">                                  type: &quot;success&quot;,</span><br><span class="line">                                  duration: 600,</span><br><span class="line">                                  onClose: () &#x3D;&gt; &#123;</span><br><span class="line">                                      this.selectMineClearanceOptionsVisible &#x3D; false</span><br><span class="line">                                  &#125;</span><br><span class="line">                              &#125;);</span><br><span class="line">                  &#125;)</span><br><span class="line">              &#125;  </span><br><span class="line">            &#125;).catch(() &#x3D;&gt; &#123;</span><br><span class="line">              this.$message(&#123;</span><br><span class="line">                  type: &#39;info&#39;,</span><br><span class="line">                  message: &#39;已取消&#39;</span><br><span class="line">              &#125;)</span><br><span class="line">            &#125;);</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h3 id="特殊字符限定"><a href="#特殊字符限定" class="headerlink" title="特殊字符限定"></a>特殊字符限定</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 特殊字符限定</span><br><span class="line"> * *&#x2F;</span><br><span class="line"> 定义在main.js里面</span><br><span class="line">Vue.prototype.specialCharacterQualification &#x3D; function (value) &#123;</span><br><span class="line">  value &#x3D; value.replace(&#x2F;[&#96;~!@$%^&amp;()_\-+&#x3D;&lt;&gt;?:&quot;&#123;&#125;|,.&#x2F;;&#39;\\[\]·~！@￥%……&amp;（）——\-+&#x3D;&#123;&#125;|《》？：“”【】、；‘’，。、]&#x2F;g, &#39;&#39;).replace(&#x2F;\s&#x2F;g, &quot;&quot;);</span><br><span class="line">  return value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">在全局子组件中使用：</span><br><span class="line">    &lt;el-input</span><br><span class="line">         :value&#x3D;&quot;keyWordForm.labelName&quot;</span><br><span class="line">         @input&#x3D;&quot;e &#x3D;&gt; keyWordForm.labelName &#x3D; specialCharacterQualification(e)&quot;</span><br><span class="line">         placeholder&#x3D;&quot;请输入分类标签名称&quot;&gt;</span><br><span class="line">    &lt;&#x2F;el-input&gt;</span><br></pre></td></tr></table></figure><h3 id="elementui框架文字和空格输入框限定"><a href="#elementui框架文字和空格输入框限定" class="headerlink" title="elementui框架文字和空格输入框限定"></a>elementui框架文字和空格输入框限定</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-form-item label&#x3D;&quot;联系方式&quot;&gt;</span><br><span class="line">       &lt;el-input v-model.trim&#x3D;&quot;basicForm.contact&quot; maxlength&#x3D;&quot;11&quot;&gt;&lt;&#x2F;el-input&gt;</span><br><span class="line">&lt;&#x2F;el-form-item&gt;</span><br></pre></td></tr></table></figure><h3 id="element-UI-框架-el-input-触发不了-key-enter事件"><a href="#element-UI-框架-el-input-触发不了-key-enter事件" class="headerlink" title="element-UI 框架 el-input 触发不了 @key.enter事件"></a>element-UI 框架 el-input 触发不了 @key.enter事件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">解决方案：使用@key.center.native</span><br><span class="line">    &lt;el-input v-model&#x3D;&quot;form.loginName&quot;</span><br><span class="line">    placeholder&#x3D;&quot;账号&quot; </span><br><span class="line">    @keyup.enter.native&#x3D;&quot;doLogin&quot;&gt;</span><br><span class="line">    &lt;&#x2F;el-input&gt;</span><br></pre></td></tr></table></figure><h3 id="vue-如何获取拉回数据后图片的高度？"><a href="#vue-如何获取拉回数据后图片的高度？" class="headerlink" title="vue 如何获取拉回数据后图片的高度？"></a>vue 如何获取拉回数据后图片的高度？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;img</span><br><span class="line">    :src&#x3D;&quot;userInfo.profilePicture&quot;</span><br><span class="line">    alt</span><br><span class="line">    class&#x3D;&quot;img-picture&quot;</span><br><span class="line">    v-if&#x3D;&quot;userInfo.profilePicture&quot;</span><br><span class="line">    ref&#x3D;&quot;myImg&quot;</span><br><span class="line">    @load&#x3D;&quot;imageFn&quot;</span><br><span class="line">&gt;</span><br><span class="line"> imageFn() &#123;</span><br><span class="line">    console.log(this.$refs.myImg.offsetHeight);</span><br><span class="line">    console.log(this.$refs.myImg.offsetWidth);</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><h3 id="关于移动端样式兼容的问题"><a href="#关于移动端样式兼容的问题" class="headerlink" title="关于移动端样式兼容的问题"></a>关于移动端样式兼容的问题</h3><p><code>设置meta标签viewport属性，使其无视设备的真实分辨率，直接通过dpi，在物理尺寸和浏览器之间重设分辨率，从而达到能有统一的分辨率的效果。并且禁止掉用户缩放</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0, maximum-scale&#x3D;1.0, minimum-scale&#x3D;1.0, user-scalable&#x3D;no&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><h3 id="Vue-vm-set-api-数组或者对象赋值或者其他"><a href="#Vue-vm-set-api-数组或者对象赋值或者其他" class="headerlink" title="Vue vm.set()api (数组或者对象赋值或者其他)"></a>Vue vm.set()api (数组或者对象赋值或者其他)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">res.resultObj.list.map(v &#x3D;&gt; &#123;</span><br><span class="line">                 this.$set(v,&#39;questionOptionId&#39;,&#39;&#39;) </span><br><span class="line">             &#125;)</span><br></pre></td></tr></table></figure><h3 id="银行卡正则表达式"><a href="#银行卡正则表达式" class="headerlink" title="银行卡正则表达式"></a>银行卡正则表达式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;^([1-9]&#123;1&#125;)(\d&#123;15&#125;|\d&#123;16&#125;|\d&#123;17&#125;|\d&#123;18&#125;)$&#x2F;</span><br></pre></td></tr></table></figure><h3 id="表单提交"><a href="#表单提交" class="headerlink" title="表单提交"></a>表单提交</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">this.$prompt(&#39;打回原因&#39;, &#39;确定打回吗？&#39;, &#123;</span><br><span class="line">              confirmButtonText: &#39;确定&#39;,</span><br><span class="line">              cancelButtonText: &#39;取消&#39;,</span><br><span class="line">              inputPlaceholder: &#39;请输入原因&#39;,</span><br><span class="line">              inputValidator: function judge(value)&#123;</span><br><span class="line">                  if(!value)&#123;</span><br><span class="line">                      return &#39;打回原因不能为空&#39;</span><br><span class="line">                  &#125; else if(value.length&gt;20)&#123;</span><br><span class="line">                       return &#39;字数超出限制&#39;</span><br><span class="line">                  &#125; </span><br><span class="line">                  let regs &#x3D; &#x2F;^[^\s]*$&#x2F;</span><br><span class="line">                  return regs.test(value)</span><br><span class="line">              &#125;,</span><br><span class="line">          &#125;).then((&#123; value &#125;) &#x3D;&gt; &#123;</span><br><span class="line">              param.failReason &#x3D; value;</span><br><span class="line">              postBehavior(&#39;&#x2F;store&#x2F;sup&#x2F;setDjSupplierReject&#39;, param).then(res &#x3D;&gt; &#123;</span><br><span class="line">                      if (res.resultCode !&#x3D;&#x3D; 1000) &#123;</span><br><span class="line">                          return this.$message.error(res.resultMsg);</span><br><span class="line">                      &#125;</span><br><span class="line">                      this.$message(&#123;</span><br><span class="line">                          message: res.resultMsg,</span><br><span class="line">                          type: &quot;success&quot;,</span><br><span class="line">                          duration: 600,</span><br><span class="line">                          onClose: () &#x3D;&gt; &#123;</span><br><span class="line">                            this.auditDialogVisible &#x3D; false;</span><br><span class="line">                            this.getList();</span><br><span class="line">                          &#125;</span><br><span class="line">                      &#125;);</span><br><span class="line">              &#125;)</span><br><span class="line">          &#125;).catch(() &#x3D;&gt; &#123;&#125;);</span><br></pre></td></tr></table></figure><h3 id="倒计时"><a href="#倒计时" class="headerlink" title="倒计时"></a>倒计时</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">getCountDown()&#123;</span><br><span class="line">         if (!this.sucssyPhone) return;</span><br><span class="line">         this.sucssyPhone &#x3D; false;</span><br><span class="line">         this.content &#x3D; this.totalTime + &#39;s后重新发送&#39;;</span><br><span class="line">         let clock &#x3D; window.setInterval(() &#x3D;&gt; &#123;</span><br><span class="line">             this.totalTime--</span><br><span class="line">             this.content &#x3D; this.totalTime + &#39;s后重新发送&#39;;</span><br><span class="line">             if (this.totalTime &lt; 0) &#123;</span><br><span class="line">             window.clearInterval(clock)</span><br><span class="line">             this.content &#x3D; &#39;重新发送验证码&#39;;</span><br><span class="line">             this.totalTime &#x3D; 60</span><br><span class="line">             this.sucssyPhone &#x3D; true</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;,1000)</span><br><span class="line">     &#125;,</span><br></pre></td></tr></table></figure><h3 id="限定只能输入中文"><a href="#限定只能输入中文" class="headerlink" title="限定只能输入中文"></a>限定只能输入中文</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  &lt;el-form-item label&#x3D;&quot;输入您的姓名&quot; prop&#x3D;&quot;name&quot;&gt;</span><br><span class="line">    &lt;el-input v-model.trim&#x3D;&quot;messageForm.name&quot; placeholder&#x3D;&quot;请输入姓名&quot;  maxlength&#x3D;&quot;4&quot;</span><br><span class="line">               @keyup.native&#x3D;&quot;inputChange($event)&quot;            @keydown.native&#x3D;&quot;inputChange($event)&quot;</span><br><span class="line">               &gt;&lt;&#x2F;el-input&gt;</span><br><span class="line">  &lt;&#x2F;el-form-item&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 限定只能输入中文</span><br><span class="line">       inputChange (e) &#123;</span><br><span class="line">           const o &#x3D; e.target;</span><br><span class="line">           o.value &#x3D; o.value.replace(&#x2F;[^\u4E00-\u9FA5]&#x2F;g, &#39;&#39;); &#x2F;&#x2F; 清除除了中文以外的输入的字符</span><br><span class="line">       　　this.messageForm.name &#x3D; o.value;</span><br><span class="line">       &#125;,</span><br></pre></td></tr></table></figure><h3 id="上传附件限定大小"><a href="#上传附件限定大小" class="headerlink" title="上传附件限定大小"></a>上传附件限定大小</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">       &lt;el-upload :action&#x3D;&quot;imgUploadUrl&quot; </span><br><span class="line">                list-type&#x3D;&quot;picture-card&quot; </span><br><span class="line">                :data&#x3D;&quot;&#123;address:&#39;goods&#39;&#125;&quot; </span><br><span class="line">                :file-list&#x3D;&#39;updataHtForm.htImgList&#39; </span><br><span class="line">                accept&#x3D;&quot;.jpg,.jpeg,.png,.gif,.bmp,.pdf,.JPG,.JPEG,.BMP,.PDF&quot; </span><br><span class="line">                :on-success&#x3D;&quot;imgSuccess&quot; </span><br><span class="line">                :on-remove&#x3D;&quot;imgRemove&quot; </span><br><span class="line">                :limit&#x3D;&quot;4&quot; </span><br><span class="line">                :class&#x3D;&quot;&#123; &#39;hide&#39;: flag&#125;&quot;</span><br><span class="line">                :before-upload&#x3D;&quot;beforeUpload&quot;</span><br><span class="line">                &gt;</span><br><span class="line">                    &lt;i class&#x3D;&quot;el-icon-plus&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">                &lt;&#x2F;el-upload&gt;</span><br><span class="line">        &#x2F;&#x2F;图片上传成功后的钩子函数</span><br><span class="line">    imgSuccess(file, fileList) &#123;</span><br><span class="line">        fileList.response &#x3D; JSON.parse(AES.decrypt(fileList.response));</span><br><span class="line">        this.updataHtForm.htImgList.push(&#123;</span><br><span class="line">            name: fileList.name,</span><br><span class="line">            url: fileList.response.msg.resultObj[0].url,</span><br><span class="line">            imageUrl: fileList.response.msg.resultObj[0].address</span><br><span class="line">        &#125;)</span><br><span class="line">        if (this.updataHtForm.htImgList.length &#x3D;&#x3D; 4) &#123;</span><br><span class="line">            this.flag &#x3D; true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F;图片列表被移除时的钩子函数</span><br><span class="line">    imgRemove(file, fileList) &#123;</span><br><span class="line">        this.updataHtForm.htImgList &#x3D; [];</span><br><span class="line">        fileList.forEach((i) &#x3D;&gt; &#123;</span><br><span class="line">            this.updataHtForm.htImgList.push(&#123;</span><br><span class="line">                name: i.name,</span><br><span class="line">                url: i.url,</span><br><span class="line">                imageUrl: i.imageUrl</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">        if (this.updataHtForm.htImgList.length &lt; 4) &#123;</span><br><span class="line">            this.flag &#x3D; false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#x2F;&#x2F; 上传附件大小</span><br><span class="line">beforeUpload (file) &#123;</span><br><span class="line">        let testmsg&#x3D;file.name.substring(file.name.lastIndexOf(&#39;.&#39;)+1)</span><br><span class="line">const isLt2M &#x3D; file.size &#x2F; 1024 &#x2F; 1024 &lt; 5     &#x2F;&#x2F;这里做文件大小限制</span><br><span class="line">if(!isLt2M) &#123;</span><br><span class="line">this.$message(&#123;</span><br><span class="line">message: &#39;上传文件大小不能超过 5MB!&#39;,</span><br><span class="line">type: &#39;warning&#39;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">return isLt2M</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><h3 id="字符串转换为数组"><a href="#字符串转换为数组" class="headerlink" title="字符串转换为数组"></a>字符串转换为数组</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let arrys &#x3D; &#39;文字,中文,英文,鳄鱼,法文,德文&#39;</span><br><span class="line">let ArrySum &#x3D; arrys.split(&#39;,&#39;)</span><br><span class="line">console.log(ArrySum)</span><br></pre></td></tr></table></figure><h3 id="数组转换为字符串"><a href="#数组转换为字符串" class="headerlink" title="数组转换为字符串"></a>数组转换为字符串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let ArryNum &#x3D; [&#39;睡觉&#39;,&#39;吃饭&#39;,&#39;玩游戏&#39;,&#39;k歌&#39;]</span><br><span class="line">let Nubmer &#x3D; ArryNum.join(&#39;,&#39;)</span><br><span class="line">console.log(Nubmer)</span><br></pre></td></tr></table></figure><h3 id="修改github密码后-sourceTree连接-不上的问题"><a href="#修改github密码后-sourceTree连接-不上的问题" class="headerlink" title="修改github密码后 sourceTree连接 不上的问题"></a>修改github密码后 sourceTree连接 不上的问题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">主要原因是我们在修改密码后，sourceTree本地的passwd并没有修改</span><br><span class="line">方法也很简单，把passwd文件删除就可以了</span><br><span class="line">1.</span><br><span class="line">找到sourcetree文件所在目录，我的是在它的上一个目录，找到Atlassian目录，</span><br><span class="line">C:\Users\admin\AppData\Local\Atlassian</span><br><span class="line">2. 进入该目录，找到passwd文件，删除 </span><br><span class="line">3.删除之后，重新提交你的项目，出现弹框后，输入你的用户名和密码就可以提交了，完美解决！！！</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="JS中try…catch…的用法"><a href="#JS中try…catch…的用法" class="headerlink" title="JS中try…catch…的用法"></a>JS中try…catch…的用法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> try</span><br><span class="line">   &#123;</span><br><span class="line">   &#x2F;&#x2F;在这里运行代码</span><br><span class="line">     抛出错误</span><br><span class="line">   &#125;</span><br><span class="line"> catch(err)</span><br><span class="line">   &#123;</span><br><span class="line">   &#x2F;&#x2F;在这里处理错误</span><br><span class="line">   &#125;</span><br><span class="line"> function myFunction()&#123;</span><br><span class="line">    try&#123; </span><br><span class="line">        var x&#x3D;document.getElementById(&quot;demo&quot;).value;   取元素的值</span><br><span class="line">        </span><br><span class="line">        if(x&#x3D;&#x3D;&quot;&quot;)    throw &quot;值为空&quot;;       根据获取的值，抛出错误</span><br><span class="line">        if(isNaN(x)) throw &quot;不是数字&quot;;</span><br><span class="line">        if(x&gt;10)     throw &quot;太大&quot;;</span><br><span class="line">        if(x&lt;5)      throw &quot;太小&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    catch(err)&#123;</span><br><span class="line">        var y&#x3D;document.getElementById(&quot;mess&quot;);     抓住上面throw抛出的错误，给p标签显示</span><br><span class="line">        y.innerHTML&#x3D;&quot;错误：&quot; + err + &quot;。&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-input v-model&#x3D;&quot;search&quot; size&#x3D;&quot;small&quot; clearable placeholder&#x3D;&quot;请输入 姓名 &#x2F; 电话号码&quot; @keyup.native.13&#x3D;&quot;getSarchkey()&quot; @clear&#x3D;&quot;getSarchkey()&quot;&gt;&lt;&#x2F;el-input&gt;</span><br><span class="line">  &#x2F;&#x2F;获取实名认证列表</span><br><span class="line">        getSarchkey () &#123;</span><br><span class="line">          this.getList()</span><br><span class="line">        &#125;,</span><br></pre></td></tr></table></figure><h4 id="两个数组的交集"><a href="#两个数组的交集" class="headerlink" title="两个数组的交集"></a>两个数组的交集</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var numOne &#x3D; [0, 2, 4, 6, 8, 8];</span><br><span class="line">var numTwo &#x3D; [1, 2, 3, 4, 5, 6];</span><br><span class="line">var duplicatedValues &#x3D; […new Set(numOne)].filter(item &#x3D;&gt; numTwo.includes(item));</span><br><span class="line">console.log(duplicatedValues); </span><br><span class="line">&#x2F;&#x2F; returns [2, 4, 6]</span><br></pre></td></tr></table></figure><h4 id="从数组中删除假值"><a href="#从数组中删除假值" class="headerlink" title="从数组中删除假值"></a>从数组中删除假值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var mixedArr &#x3D; [0, &quot;blue&quot;, &quot;&quot;, NaN, 9, true, undefined, &quot;white&quot;, false];</span><br><span class="line">var trueArr &#x3D; mixedArr.filter(Boolean);</span><br><span class="line">console.log(trueArr); </span><br><span class="line">&#x2F;&#x2F; returns [&quot;blue&quot;, 9, true, &quot;white&quot;]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="页面刷方法"><a href="#页面刷方法" class="headerlink" title="页面刷方法"></a>页面刷方法</h3><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1583807196152.png" alt="1583807196152"></p><h4 id="数组（对象）去重"><a href="#数组（对象）去重" class="headerlink" title="数组（对象）去重"></a>数组（对象）去重</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">let arry &#x3D; [2,3,65,5,3,2]</span><br><span class="line">let remove &#x3D; [...new Set(arry)]</span><br><span class="line">console.log(remove)</span><br><span class="line"></span><br><span class="line">let objArry &#x3D; [&#123;id:2,value: &#39;打球&#39;&#125;，&#123;id：3，value: &#39;看书&#39;&#125;，&#123;id：2，：value:&#39;打篮球&#39;&#125;]</span><br><span class="line">let obj &#x3D; &#123;&#125;;</span><br><span class="line">let arrayAndObj &#x3D; objArry.reduce((cur,next) &#x3D;&gt; &#123;</span><br><span class="line">obj[next.id] ? &quot;&quot; : obj[next.id] &#x3D; true &amp;&amp; cur.push(next);</span><br><span class="line">return cur;</span><br><span class="line">&#125;,[])</span><br><span class="line">console.log(arrayAndObj)</span><br></pre></td></tr></table></figure><h3 id="移动端自适应"><a href="#移动端自适应" class="headerlink" title="移动端自适应"></a>移动端自适应</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">这是基于vue-cli2.0脚手架配置的实例。 至于vue-cli3.0配置在vue.config.js中，都是大同小异呐</span><br><span class="line">1.安装： 如果Ui组件用的是vant需要安装lib-flexible不安装·打包到测试服或者生产服会有一些差异（vant 37.5为准）</span><br><span class="line">    &quot;dependencies&quot;: &#123;</span><br><span class="line">        &quot;amfe-flexible&quot;: &quot;^2.2.1&quot;,</span><br><span class="line">        &quot;axios&quot;: &quot;^0.19.2&quot;,</span><br><span class="line">        &quot;lib-flexible&quot;: &quot;^0.3.2&quot;,</span><br><span class="line">        &quot;px2rem-loader&quot;: &quot;^0.1.9&quot;,</span><br><span class="line">        &quot;vant&quot;: &quot;^2.5.5&quot;,</span><br><span class="line">        &quot;vue&quot;: &quot;^2.5.2&quot;,</span><br><span class="line">        &quot;vue-router&quot;: &quot;^3.0.1&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    npm install XX --save</span><br><span class="line">    lib—flexible</span><br><span class="line">    px2rem-loader</span><br><span class="line">    amfe-flexible</span><br><span class="line">    </span><br><span class="line">2.配置index.html: </span><br><span class="line">    &lt;!DOCTYPE html&gt;</span><br><span class="line">    &lt;html&gt;</span><br><span class="line">      &lt;head&gt;</span><br><span class="line">        &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">        &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1, maximum-scale&#x3D;1, minimum-scale&#x3D;1, user-scalable&#x3D;no&quot;&gt;</span><br><span class="line">        &lt;title&gt;当家装修APP&lt;&#x2F;title&gt;</span><br><span class="line">      &lt;&#x2F;head&gt;</span><br><span class="line">      &lt;body&gt;</span><br><span class="line">        &lt;div id&#x3D;&quot;app&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">      &lt;&#x2F;body&gt;</span><br><span class="line">    &lt;&#x2F;html&gt;</span><br><span class="line">    </span><br><span class="line">3. 配置main.js:</span><br><span class="line">    import &#39;lib-flexible&#39;;</span><br><span class="line">import &#39;amfe-flexible&#x2F;index.js&#39;</span><br><span class="line"></span><br><span class="line">4. 在配置.postcssrc.js中（需要在项目中新建一个js文件）：</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">      &quot;plugins&quot;: &#123;</span><br><span class="line">        &quot;postcss-import&quot;: &#123;&#125;,</span><br><span class="line">        &quot;postcss-url&quot;: &#123;&#125;,</span><br><span class="line">        &#x2F;&#x2F; to edit target browsers: use &quot;browserslist&quot; field in package.json</span><br><span class="line">        &quot;autoprefixer&quot;: &#123;&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">5.配置bulid文件夹下的utils.js：</span><br><span class="line">  const postcssLoader &#x3D; &#123;</span><br><span class="line">        loader: &#39;postcss-loader&#39;,</span><br><span class="line">        options: &#123;</span><br><span class="line">          sourceMap: options.sourceMap</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      const px2remLoader &#x3D; &#123;</span><br><span class="line">        loader: &#39;px2rem-loader&#39;,</span><br><span class="line">        options: &#123;</span><br><span class="line">          remUnit: 37.5  &#x2F;&#x2F;设计稿的宽度 除以 10，一般设计稿的宽度都为375px</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      再则在generateLoaders（）函数：</span><br><span class="line">       const loaders &#x3D; options.usePostCSS ? [cssLoader,        postcssLoader,px2remLoader] : [cssLoader,px2remLoader]</span><br><span class="line">       </span><br><span class="line">       </span><br><span class="line">vue-cli3脚手架配置： </span><br><span class="line">&#x2F;&#x2F;vue.config.js</span><br><span class="line">    const autoprefixer &#x3D; require(&#39;autoprefixer&#39;);</span><br><span class="line">    const pxtorem &#x3D; require(&#39;postcss-pxtorem&#39;);</span><br><span class="line">    module.exports &#x3D; &#123;</span><br><span class="line">        css: &#123;</span><br><span class="line">            loaderOptions: &#123;</span><br><span class="line">                postcss: &#123;</span><br><span class="line">                    plugins: [</span><br><span class="line">                        autoprefixer(),</span><br><span class="line">                        pxtorem(&#123;</span><br><span class="line">                            rootValue: 37.5, &#x2F;&#x2F;基准值(计算公式：设计图宽度&#x2F;10)，设计图尺寸为基准值为375&#x2F;10&#x3D;37.5</span><br><span class="line">                            propList: [&#39;*&#39;]</span><br><span class="line">                        &#125;)</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       </span><br></pre></td></tr></table></figure><h3 id="ES6数组some（）和every（）使用"><a href="#ES6数组some（）和every（）使用" class="headerlink" title="ES6数组some（）和every（）使用"></a>ES6数组some（）和every（）使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">some():只要其中一个为true就会返回true。</span><br><span class="line">every(): 必须所有都返回true才会返回true</span><br><span class="line">every（）和 some（）目的：确定数组的所有成员是否满足指定的需求</span><br><span class="line"></span><br><span class="line">    let computers &#x3D; [</span><br><span class="line">        &#123;name:&quot;Apple&quot;,ram:8&#125;,</span><br><span class="line">        &#123;name:&quot;IBM&quot;,ram:4&#125;,</span><br><span class="line">        &#123;name:&quot;Acer&quot;,ram:32&#125;,</span><br><span class="line">    ];</span><br><span class="line">    let result&#x3D; computers.every( computer &#x3D;&gt;&#123;</span><br><span class="line">       return computer.ram &gt; 16</span><br><span class="line">    &#125;)</span><br><span class="line">console.log(result)&#x2F;&#x2F;false;</span><br><span class="line">    let some &#x3D; computers.some(computer &#x3D;&gt;&#123;</span><br><span class="line">       return computer.ram &gt; 16</span><br><span class="line">    &#125;)</span><br><span class="line">console.log(some)&#x2F;&#x2F;true</span><br></pre></td></tr></table></figure><h2 id="js数组的操作方法，concat，splice，join，split-indexOf"><a href="#js数组的操作方法，concat，splice，join，split-indexOf" class="headerlink" title="js数组的操作方法，concat，splice，join，split,indexOf"></a>js数组的操作方法，concat，splice，join，split,indexOf</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; concat() : 复制当前数组所创建的副本，如果传参，会先创建副本，接收到的参数添加到副本数组的末尾。如果传递其他值，则直接添加到副本数组的末尾</span><br></pre></td></tr></table></figure><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><ul><li>判断类型是否为原始类型，如果是，无需拷贝直接返回</li><li>为避免出现循环引用，拷贝对象时先判断存储空间中是否存在当前对象，如果有就直接返回</li><li>开辟一个存储空间，来存储当前对象和拷贝对象的对应关系</li><li>对引用类型递归拷贝直到属性为原始类型</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const deepClone &#x3D; (target, cache &#x3D; new WeakMap()) &#x3D;&gt; &#123;</span><br><span class="line">    if(target &#x3D;&#x3D;&#x3D; null || typeof target !&#x3D;&#x3D; &#39;object&#39;) &#123;</span><br><span class="line">        return target</span><br><span class="line">    &#125;</span><br><span class="line">    if(cache.get(target)) &#123;</span><br><span class="line">        return target</span><br><span class="line">    &#125;</span><br><span class="line">    const copy &#x3D; Array.isArray(target) ? [] : &#123;&#125;</span><br><span class="line">    cache.set(target, copy)</span><br><span class="line">    Object.keys(target).forEach(key &#x3D;&gt; copy[key] &#x3D; deepClone(obj[key], cache))</span><br><span class="line">    return copy</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 冒泡排序</span><br><span class="line">mounted() &#123;</span><br><span class="line">  this.study()</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">    BubbleSort (arr) &#123;</span><br><span class="line">      const arrLenght &#x3D; arr.length</span><br><span class="line">      for (let i &#x3D; 0; i&lt;arrLenght; i++) &#123;</span><br><span class="line">        for (let j &#x3D; 1; j&lt;arrLenght - i; j++) &#123;</span><br><span class="line">          if (arr[j] &lt; arr[j - 1]) &#123;</span><br><span class="line">            const temp &#x3D; arr[j]</span><br><span class="line">            arr[j] &#x3D; arr[j-1]</span><br><span class="line">            arr[j-1] &#x3D; temp</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      return arr</span><br><span class="line">    &#125;,</span><br><span class="line">  study () &#123;</span><br><span class="line">    let arr &#x3D; [23,65,32,4,68,15,8]</span><br><span class="line">    this.BubbleSort(arr)</span><br><span class="line">    console.log(arr)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="jenkins-关闭和重启"><a href="#jenkins-关闭和重启" class="headerlink" title="jenkins 关闭和重启"></a>jenkins 关闭和重启</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">关闭则在浏览器中输入： http:&#x2F;&#x2F;localhost:8080&#x2F;exit</span><br><span class="line">重启则在浏览器输入：http:&#x2F;&#x2F;localhost:8080&#x2F;restart</span><br></pre></td></tr></table></figure><h3 id="elementui-上传图片预览-点击文件列表中已上传的文件时的钩子"><a href="#elementui-上传图片预览-点击文件列表中已上传的文件时的钩子" class="headerlink" title="elementui 上传图片预览(点击文件列表中已上传的文件时的钩子)"></a>elementui 上传图片预览(点击文件列表中已上传的文件时的钩子)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> :on-preview&#x3D;&quot;util.imagePreview&quot;</span><br><span class="line">  </span><br><span class="line">  &#x2F;&#x2F;图片预览 (任何图片都可以)</span><br><span class="line">  util.js 公用方法: </span><br><span class="line">  imagePreview(file)&#123;</span><br><span class="line">      if(Object.prototype.toString.call(file) &#x3D;&#x3D;&#x3D; &#39;[object Object]&#39;)&#123;</span><br><span class="line">      window.open(file.url);</span><br><span class="line">      &#125;else if(Object.prototype.toString.call(file) &#x3D;&#x3D;&#x3D; &#39;[object String]&#39;)&#123;</span><br><span class="line">      window.open(file);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="图片预览（任何图片都可以）"><a href="#图片预览（任何图片都可以）" class="headerlink" title="图片预览（任何图片都可以）"></a>图片预览（任何图片都可以）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">imagePreview(file)&#123;</span><br><span class="line">        if(Object.prototype.toString.call(file) &#x3D;&#x3D;&#x3D; &#39;[object Object]&#39;)&#123;</span><br><span class="line">            window.open(file.url);</span><br><span class="line">        &#125;else if(Object.prototype.toString.call(file) &#x3D;&#x3D;&#x3D; &#39;[object String]&#39;)&#123;</span><br><span class="line">            window.open(file);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端性能优化</title>
      <link href="2020/10/08/performance/"/>
      <url>2020/10/08/performance/</url>
      
        <content type="html"><![CDATA[<h2 id="前端性能优化的七大手段"><a href="#前端性能优化的七大手段" class="headerlink" title="前端性能优化的七大手段"></a>前端性能优化的七大手段</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1. 减少请求数量</span><br><span class="line"></span><br><span class="line">2. 减小资源大小</span><br><span class="line"></span><br><span class="line">3. 优化网络连接</span><br><span class="line"></span><br><span class="line">4. 优化资源加载</span><br><span class="line"></span><br><span class="line">5. 减少重绘回流</span><br><span class="line"></span><br><span class="line">6. 性能更好的API</span><br><span class="line"></span><br><span class="line">7. webpack优化</span><br></pre></td></tr></table></figure><h2 id="线程与进程的区别"><a href="#线程与进程的区别" class="headerlink" title="线程与进程的区别"></a>线程与进程的区别</h2>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">一个程序至少有一个进程,一个进程至少有一个线程. </span><br><span class="line">线程的划分尺度小于进程，使得多线程程序的并发性高</span><br></pre></td></tr></table></figure><h2 id="你如何对网站的文件和资源进行优化？"><a href="#你如何对网站的文件和资源进行优化？" class="headerlink" title="你如何对网站的文件和资源进行优化？"></a>你如何对网站的文件和资源进行优化？</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">期待的解决方案包括：</span><br><span class="line"> 文件合并</span><br><span class="line"> 文件最小化&#x2F;文件压缩</span><br><span class="line"> 使用 CDN 托管</span><br><span class="line"> 缓存的使用（多个域名来提供缓存）</span><br></pre></td></tr></table></figure><h2 id="请说出三种减少页面加载时间的方法。"><a href="#请说出三种减少页面加载时间的方法。" class="headerlink" title="请说出三种减少页面加载时间的方法。"></a>请说出三种减少页面加载时间的方法。</h2><p> 1.优化图片<br> 2.图像格式的选择（GIF：提供的颜色较少，可用在一些对颜色要求不高的地方）<br> 3.优化CSS（压缩合并css，如margin-top,margin-left…)<br> 4.网址后加斜杠（如<a href="http://www.campr.com/%E7%9B%AE%E5%BD%95%EF%BC%8C%E4%BC%9A%E5%88%A4%E6%96%AD%E8%BF%99%E4%B8%AA%E2%80%9C%E7%9B%AE%E5%BD%95%E6%98%AF%E4%BB%80%E4%B9%88%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B%EF%BC%8C%E6%88%96%E8%80%85%E6%98%AF%E7%9B%AE%E5%BD%95%E3%80%82%EF%BC%89">www.campr.com/目录，会判断这个“目录是什么文件类型，或者是目录。）</a><br> 5.标明高度和宽度（如果浏览器没有找到这两个参数，它需要一边下载图片一边计算大小，如果图片很多，浏览  器需要不断地调整页面。这不但影响速度，也影响浏览体验。<br>当浏览器知道了高度和宽度参数后，即使图片暂时无法显示，页面上也会腾出图片的空位，然后继续加载后    面的内容。从而加载时间快了，浏览体验也更好了。） </p><p>  6.减少http请求（合并文件，合并图片）。</p><h2 id="哪些操作会造成内存泄漏？"><a href="#哪些操作会造成内存泄漏？" class="headerlink" title="哪些操作会造成内存泄漏？"></a>哪些操作会造成内存泄漏？</h2><p>内存泄漏指任何对象在您不再拥有或需要它之后仍然存在。<br>垃圾回收器定期扫描对象，并计算引用了每个对象的其他对象的数量。如果一个对象的引用数量为 0（没有其他对象引用过该对象），或对该对象的惟一引用是循环的，那么该对象的内存即可回收。</p><p>setTimeout 的第一个参数使用字符串而非函数的话，会引发内存泄漏。<br>闭包、控制台日志、循环（在两个对象彼此引用且彼此保留时，就会产生一个循环）</p><h2 id="什么叫优雅降级和渐进增强？"><a href="#什么叫优雅降级和渐进增强？" class="headerlink" title="什么叫优雅降级和渐进增强？"></a>什么叫优雅降级和渐进增强？</h2><p>优雅降级：Web站点在所有新式浏览器中都能正常工作，如果用户使用的是老式浏览器，则代码会检查以确认它们是否能正常工作。由于IE独特的盒模型布局问题，针对不同版本的IE的hack实践过优雅降级了,为那些无法支持功能的浏览器增加候选方案，使之在旧式浏览器上以某种形式降级体验却不至于完全失效.</p><p>渐进增强：从被所有浏览器支持的基本功能开始，逐步地添加那些只有新式浏览器才支持的功能,向页面增加无害于基础浏览器的额外样式和功能的。当浏览器支持时，它们会自动地呈现出来并发挥作用。</p><h2 id="你有哪些性能优化的方法？"><a href="#你有哪些性能优化的方法？" class="headerlink" title="你有哪些性能优化的方法？"></a>你有哪些性能优化的方法？</h2><p>  （1） 减少http请求次数：CSS Sprites, JS、CSS源码压缩、图片大小控制合适；网页Gzip，CDN托管，data缓存         ，图片服务器。</p><p>  （2） 前端模板 JS+数据，减少由于HTML标签导致的带宽浪费，前端用变量保存AJAX请求结果，每次操作本地变    量，不用请求，减少请求次数</p><p>  （3） 用innerHTML代替DOM操作，减少DOM操作次数，优化javascript性能。</p><p>  （4） 当需要设置的样式很多时设置className而不是直接操作style。</p><p>  （5） 少用全局变量、缓存DOM节点查找的结果。减少IO读取操作。</p><p>  （6） 避免使用CSS Expression（css表达式)又称Dynamic properties(动态属性)。</p><p>  （7） 图片预加载，将样式表放在顶部，将脚本放在底部  加上时间戳。</p><h2 id="前端安全问题？"><a href="#前端安全问题？" class="headerlink" title="前端安全问题？"></a>前端安全问题？</h2><p>​    （XSS，sql注入，CSRF）<br>CSRF：是跨站请求伪造，很明显根据刚刚的解释，他的核心也就是请求伪造，通过伪造身份提交POST和GET请求来进行跨域的攻击。</p><p><strong>完成CSRF需要两个步骤：</strong></p><p>1.登陆受信任的网站A，在本地生成COOKIE</p><p>2.在不登出A的情况下，或者本地COOKIE没有过期的情况下，访问危险网站B。</p><h2 id="JavaScript原型，原型链-有什么特点？"><a href="#JavaScript原型，原型链-有什么特点？" class="headerlink" title="JavaScript原型，原型链 ? 有什么特点？"></a>JavaScript原型，原型链 ? 有什么特点？</h2><ul><li>原型对象也是普通的对象，是对象一个自带隐式的 <strong>proto</strong> 属性，原型也有可能有自己的原型，如果一个原型对象的原型不为null的话，我们就称之为原型链。</li><li>原型链是由一些用来继承和共享属性的对象组成的（有限的）对象链。</li></ul><h2 id="Vue实现数据双向绑定的原理：Object-defineProperty"><a href="#Vue实现数据双向绑定的原理：Object-defineProperty" class="headerlink" title="Vue实现数据双向绑定的原理：Object.defineProperty()"></a>Vue实现数据双向绑定的原理：Object.defineProperty()</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue实现数据双向绑定主要是：采用数据劫持结合发布者-订阅者模式的方式，通过 Object.defineProperty() 来劫持各个属性的setter，getter，在数据变动时发布消息给订阅者，触发相应监听回调。当把一个普通 Javascript 对象传给 Vue 实例来作为它的 data 选项时，Vue 将遍历它的属性，用 Object.defineProperty() 将它们转为 getter&#x2F;setter。用户看不到 getter&#x2F;setter，但是在内部它们让 Vue追踪依赖，在属性被访问和修改时通知变化。</span><br></pre></td></tr></table></figure><h2 id="vue生命周期"><a href="#vue生命周期" class="headerlink" title="vue生命周期"></a>vue生命周期</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">**beforeCreate**（创建前） : 在数据观测和初始化事件还未开始</span><br><span class="line"></span><br><span class="line">**created**（创建后）: 完成数据观测，属性和方法的运算，初始化事件，$el属性还没有显示出来</span><br><span class="line"></span><br><span class="line">**beforeMount**（载入前）: 在挂载开始之前被调用，相关的render函数首次被调用。实例已完成以下的配置：编译模板，把data里面的数据和模板生成html。注意此时还没有挂载html到页面上。</span><br><span class="line"></span><br><span class="line">**mounted**（载入后）: 在el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用。实例已完成以下的配置：用上面编译好的html内容替换el属性指向的DOM对象。完成模板中的html渲染到html页面中。此过程中进行ajax交互。</span><br><span class="line"></span><br><span class="line">**beforeUpdate**（更新前）: 在数据更新之前调用，发生在虚拟DOM重新渲染和打补丁之前。可以在该钩子中进一步地更改状态，不会触发附加的重渲染过程。</span><br><span class="line"></span><br><span class="line">**updated**（更新后）: 在由于数据更改导致的虚拟DOM重新渲染和打补丁之后调用。调用时，组件DOM已经更新，所以可以执行依赖于DOM的操作。然而在大多数情况下，应该避免在此期间更改状态，因为这可能会导致更新无限循环。该钩子在服务器端渲染期间不被调用。</span><br><span class="line"></span><br><span class="line">**beforeDestroy**（销毁前）: 在实例销毁之前调用。实例仍然完全可用。</span><br><span class="line"></span><br><span class="line">**destroyed**（销毁后）: 在实例销毁之后调用。调用后，所有的事件监听器会被移除，所有的子实例也会被销毁。该钩子在服务器端渲染期间不被调用。</span><br></pre></td></tr></table></figure><p><strong>什么是vue生命周期？</strong></p><ul><li>答： Vue 实例从创建到销毁的过程，就是生命周期。从开始创建、初始化数据、编译模板、挂载Dom→渲染、更新→渲染、销毁等一系列过程，称之为 Vue 的生命周期。</li></ul><p><strong>vue生命周期的作用是什么？</strong></p><ul><li>答：它的生命周期中有多个事件钩子，让我们在控制整个Vue实例的过程时更容易形成好的逻辑。</li></ul><h4 id="proxyscrape代理"><a href="#proxyscrape代理" class="headerlink" title="proxyscrape代理"></a>proxyscrape代理</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">112.218.231.42:1080</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 特殊字符限定</span><br><span class="line"> * *&#x2F;</span><br><span class="line"> 定义在main.js里面</span><br><span class="line">Vue.prototype.specialCharacterQualification &#x3D; function (value) &#123;</span><br><span class="line">  value &#x3D; value.replace(&#x2F;[&#96;~!@$%^&amp;()_\-+&#x3D;&lt;&gt;?:&quot;&#123;&#125;|,.&#x2F;;&#39;\\[\]·~！@￥%……&amp;（）——\-+&#x3D;&#123;&#125;|《》？：“”【】、；‘’，。、]&#x2F;g, &#39;&#39;).replace(&#x2F;\s&#x2F;g, &quot;&quot;);</span><br><span class="line">  return value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">在全局子组件中使用：</span><br><span class="line">    &lt;el-input</span><br><span class="line">         :value&#x3D;&quot;keyWordForm.labelName&quot;</span><br><span class="line">         @input&#x3D;&quot;e &#x3D;&gt; keyWordForm.labelName &#x3D; specialCharacterQualification(e)&quot;</span><br><span class="line">         placeholder&#x3D;&quot;请输入分类标签名称&quot;&gt;</span><br><span class="line">    &lt;&#x2F;el-input&gt;</span><br></pre></td></tr></table></figure><h5 id="elementui框架文字输入框限定-arrow-down-small"><a href="#elementui框架文字输入框限定-arrow-down-small" class="headerlink" title="elementui框架文字输入框限定:arrow_down_small:"></a>elementui框架文字输入框限定:arrow_down_small:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-form-item label&#x3D;&quot;联系方式&quot;&gt;</span><br><span class="line">     &lt;el-input v-model&#x3D;&quot;basicForm.contact&quot; maxlength&#x3D;&quot;11&quot;&gt;&lt;&#x2F;el-input&gt;</span><br><span class="line">&lt;&#x2F;el-form-item&gt;</span><br></pre></td></tr></table></figure><h4 id="js对象数据合并去重"><a href="#js对象数据合并去重" class="headerlink" title="js对象数据合并去重"></a>js对象数据合并去重</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function unique(arr) &#123;</span><br><span class="line">    let obj &#x3D; &#123;&#125;;</span><br><span class="line">    return arr.filter(function(item,index,arrow)&#123;</span><br><span class="line">        return obj.hasOwnProperty(typeof item + item) ? false : (obj[typeof item + item] &#x3D; true)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">let arr &#x3D; [1,1,&#39;true&#39;,&#39;true&#39;,[&#39;3&#39;],[&#39;3&#39;],[5],true,true,15,15,false,false,undefined,undefined,null,null,NaN,NaN,&#39;NaN&#39;,0,0,&#39;b&#39;,&#39;b&#39;,&#123;&#125;,&#123;&#125;]</span><br><span class="line">console.log(arr)</span><br><span class="line">console.log(unique(arr))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">  表单提交</span><br><span class="line"> fillInTheRoomDataFrom () &#123;</span><br><span class="line">            let param&#x3D;&#123;</span><br><span class="line">                </span><br><span class="line">            &#125;;</span><br><span class="line">            this.$confirm(&#39;请确定当前填写信息无误。&#39;, &#39;提示&#39;, &#123;</span><br><span class="line">                confirmButtonText: &#39;确定&#39;,</span><br><span class="line">                cancelButtonText: &#39;取消&#39;,</span><br><span class="line">                type: &#39;warning&#39;</span><br><span class="line">            &#125;).then(() &#x3D;&gt; &#123;</span><br><span class="line">                postBehavior(&#39;&#39;, param).then(res &#x3D;&gt; &#123;</span><br><span class="line">                    </span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;).catch(() &#x3D;&gt; &#123;</span><br><span class="line">                this.$message(&#123;</span><br><span class="line">                    type: &#39;info&#39;,</span><br><span class="line">                    message: &#39;已取消&#39;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="对于-undefined、任意的函数以及-symbol-三个特殊的值分别作为对象属性的值、数组元素、单独的值时-JSON-stringify-将返回不同的结果。"><a href="#对于-undefined、任意的函数以及-symbol-三个特殊的值分别作为对象属性的值、数组元素、单独的值时-JSON-stringify-将返回不同的结果。" class="headerlink" title="对于 undefined、任意的函数以及 symbol 三个特殊的值分别作为对象属性的值、数组元素、单独的值时 JSON.stringify()将返回不同的结果。"></a><strong>对于 undefined、任意的函数以及 symbol 三个特殊的值分别作为对象属性的值、数组元素、单独的值时 JSON.stringify()将返回不同的结果。</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const data &#x3D; &#123;</span><br><span class="line">  a: &quot;aaa&quot;,</span><br><span class="line">  b: undefined,</span><br><span class="line">  c: Symbol(&quot;dd&quot;),</span><br><span class="line">  fn: function() &#123;</span><br><span class="line">    return true;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">JSON.stringify(data); &#x2F;&#x2F; 输出：？</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; &quot;&#123;&quot;a&quot;:&quot;aaa&quot;&#125;&quot;</span><br></pre></td></tr></table></figure><h3 id="怎么优化CDN对于静态资源的缓存？"><a href="#怎么优化CDN对于静态资源的缓存？" class="headerlink" title="怎么优化CDN对于静态资源的缓存？"></a>怎么优化CDN对于静态资源的缓存？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">这则分是否是首次</span><br><span class="line">1.如果是首次：</span><br><span class="line">    可能是因为cdn没有资源，需要去源站拉取数据缓存，那么就需要将源站的内容先预热cdn上，后面用户访问的时候，就可以直接命中</span><br><span class="line">2.如果不是首次：</span><br><span class="line">一.资源访问量低，文件预热度不够，cdn收的请求少，无法有效命中缓存</span><br><span class="line">二.资源配置不合理，缓存时间段及cdn节点频回流</span><br><span class="line">三.http Header设置导致无法缓存，这个时候就需要检查cache-control和expires的设置</span><br><span class="line">四.大文件开启range回源</span><br><span class="line">五.做资源的动态分离，对于动态文件和静态文件放到不同的域名下面，加速静态资源</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>常见的前端面试题</title>
      <link href="2020/10/08/interviewQuestion/"/>
      <url>2020/10/08/interviewQuestion/</url>
      
        <content type="html"><![CDATA[<h5 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h5><ul><li><p>n秒内函数只会执行一次，如果n秒内事件再次被触发，则重新计算时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function debounce(fn, time &#x3D; 500) &#123;</span><br><span class="line">let timer &#x3D; null</span><br><span class="line">return () &#x3D;&gt;&#123;</span><br><span class="line">   clearTimeout(timer);</span><br><span class="line">   timer &#x3D; setTimeout(() &#x3D;&gt;&#123;</span><br><span class="line">   fn.apply(this,arguments)</span><br><span class="line">   &#125;,time);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h5><ul><li><p>事件在n秒内只会执行一次，在n秒内事件不再触发</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function throttle(fn,time)&#123;</span><br><span class="line">    let bool &#x3D; true;</span><br><span class="line">    return () &#x3D;&gt;&#123;</span><br><span class="line">        if (!bool) return;</span><br><span class="line">        bool &#x3D; false;</span><br><span class="line">        setTimeout(() &#x3D;&gt;&#123;</span><br><span class="line">        fn.apply(this,arguments);</span><br><span class="line">        bool &#x3D; true;</span><br><span class="line">        &#125;,time);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h5><ul><li>定义: 函数A返回函数B，函数B能访问函数A中的变量，那么函数B 就可以称之为闭包</li><li>特点<ul><li>函数嵌套函数</li><li>函数内部可以引用外部的参数和变量</li><li>参数和变量不会被垃圾回收机制回收(使用不当会造成内存泄漏）</li></ul></li><li>优点<ul><li>私有成员的存在</li><li>避免全局变量的污染</li></ul></li></ul><h5 id="javaScript的作用域和作用链"><a href="#javaScript的作用域和作用链" class="headerlink" title="javaScript的作用域和作用链"></a>javaScript的作用域和作用链</h5><ul><li><p>作用域</p><ul><li>定义变量的区域</li></ul></li><li><p>作用域链</p><ul><li>保证对执行环境有权访问的所有变量和函数的有序访问，通过作用域链，我们可以访问到外层环境的变量和 函数。</li></ul></li></ul><h5 id="哪些操作会造成内存泄漏？"><a href="#哪些操作会造成内存泄漏？" class="headerlink" title="哪些操作会造成内存泄漏？"></a>哪些操作会造成内存泄漏？</h5><ul><li>被遗忘的计时器或回调函数、</li><li>脱离 DOM 的引用</li><li>没必要的全局变量</li><li>闭包</li></ul><h5 id="什么是内存泄漏"><a href="#什么是内存泄漏" class="headerlink" title="什么是内存泄漏"></a>什么是内存泄漏</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">应用程序不再需要占用内存的时候，由于某些原因，内存没有被操作系统或可用内存池回收</span><br></pre></td></tr></table></figure><h5 id="垃圾回收机制和v8垃圾回收机制"><a href="#垃圾回收机制和v8垃圾回收机制" class="headerlink" title="垃圾回收机制和v8垃圾回收机制"></a>垃圾回收机制和v8垃圾回收机制</h5><ul><li>标记清除和引用计数</li><li>v8： 在 V8 中通过GC算法进行垃圾回收，将内存分为新生代和老生代，新生代的对象为存活时间较短的对象，老生代的对象为存活事件较长或常驻内存的对象。</li></ul><h5 id="原型和原型链"><a href="#原型和原型链" class="headerlink" title="原型和原型链"></a>原型和原型链</h5><ul><li>原型：所有的函数都有一个特殊的属性**<code>prototype</code>(原型)<strong>，<code>prototype</code>属性是一个指针，指向的是一个对象(原型对象)，原型对象中的方法和属性都可以</strong>被函数的实例**所共享。</li><li>原型链:原型链是用于<strong>查找引用类型（对象）的属性</strong>，查找属性会沿着原型链依次进行，如果找到该属性会停止搜索并做相应的操作，否则将会沿着原型链依次查找直到结尾。常见的应用是用在<strong>创建对象</strong>和<strong>继承</strong>中。</li></ul><h5 id="Vue组件是什么"><a href="#Vue组件是什么" class="headerlink" title="Vue组件是什么"></a>Vue组件是什么</h5><ul><li>组件是复用的vue实例。如果网页中的某一个部分需要在多个场景中使用，那么我们就可以将其    抽出封装成一个可复用的组件</li></ul><h5 id="说说在vue-js中如何实现组件间通信-（props：读-【破-p-思】）"><a href="#说说在vue-js中如何实现组件间通信-（props：读-【破-p-思】）" class="headerlink" title="说说在vue.js中如何实现组件间通信 （props：读 【破  p  思】）"></a>说说在vue.js中如何实现组件间通信 （props：读 【破  p  思】）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.假设父组件的模板包含子组件，我们可以通过props来正向地把数据从父组件传递给子组件，Props可以是Number,string,Array,object</span><br><span class="line">2.组件中的props与data函数的区别是： props中的数据来自于父级，而data函数是组件内定义的数据，所以它的作用域是组件本身。它们都可以在template、computed，watch以及methods中使用</span><br><span class="line">3.有时候，传递过来的数据来自于父级的动态数据，这时我们可以使用v-bing来动态绑定props中的数据</span><br><span class="line">4.通过自定义事件，我们可以把数据从子组件传输给父组件。子组件通过 $emit() 来触发事件，而父组件通过 $on() 来监听事件，这是典型的观察者模式。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="vue组件间通信六种方式"><a href="#vue组件间通信六种方式" class="headerlink" title="vue组件间通信六种方式"></a>vue组件间通信六种方式</h5><ul><li>props / $emit<ul><li>父组件A通过Props的方式向子组件B传递，子组件B从父组件A通过在子组件B中$emit，父组件A中v-on的方式实现的</li></ul></li><li>$emit / $on<ul><li>这种方法通过一个空的Vue实例作为中央事件总线，用它来触发事件和监听事件</li></ul></li><li>$attrs / $listeners<ul><li>多级组件嵌套需要传递数据时，可以使用它</li></ul></li><li>provide / inject  【provide读： p 罗 外的】<ul><li>主要解决了跨级组件间的通信问题，不过它的使用场景，是子组件获取上级组件的状态，跨级组件间建立了一种主动提供与依赖注入的关系</li></ul></li><li>$parent / $children<ul><li>访问父 / 子实例</li></ul></li><li>vuex<ul><li>一个专为 Vue.js 应用程序开发的状态管理插件，是一种单向数据流</li><li>state: 是一个对象，里面存放我们需要用的变量  【读  斯等的】</li><li>getter：获取state里面的变量</li><li>mutation： 用来改变state里面的状态，可以直接变更状态，只能是同步操作this.$store.commit(‘SET_NUMBER’,10)</li><li>action： 提交的是 mutation，不能直接变更状态，可以包含任意异步操作。this.$store.dispatch(‘ACTION_NAME’,data)   【dispatch 读   第斯打吃】</li><li>module： 如果用到state很多变量的情况下，使用module来拆分</li></ul></li></ul><h5 id="Map和Set的区别及使用场景"><a href="#Map和Set的区别及使用场景" class="headerlink" title="Map和Set的区别及使用场景"></a>Map和Set的区别及使用场景</h5><ul><li><p>Map</p><ul><li>一组键值对的结构,具有极快的查找速度 ,Object结构提供了“字符串—值”的对应，Map结构提供了“值—值”的对应，是一种更完善的Hash结构实现。如果你需要“键值对”的数据结构，Map比Object更合适。(初始化Map需要一个二维数组，或者直接初始化一个空Map)</li><li>应用场景： 数据存储 </li></ul></li><li><p>Set</p><ul><li>类似数组的一种数据结构，不同点在于Set中没有重复的值。(只有值，没有键,也是一组key的集合，但不存储value。)</li><li>应用场景:  数据去重</li></ul></li></ul><h5 id="websockets"><a href="#websockets" class="headerlink" title="websockets"></a>websockets</h5><ul><li><p>什么是websockets</p><ul><li>支持客户端和服务器之间的全双工通信，通过单个TCP套连接 在客户端和服务器之间  提供持久的实时通信</li></ul></li><li><p>websocket协议只有两个议程</p><ul><li><p>打开握手</p></li><li><p>帮助数据传输</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一旦客服端和服务器握手成功，它们就可以随意的以较少的开销相互发送数据</span><br></pre></td></tr></table></figure></li></ul></li><li><p>浏览器关闭后会发生什么</p><ul><li>在这种情况下，websocket调用close事件，它允许我们编写终止当前用户连接的逻辑</li></ul></li></ul><h5 id="Vuex中action通常是异步的，那么如何知道action什么时候结束？"><a href="#Vuex中action通常是异步的，那么如何知道action什么时候结束？" class="headerlink" title="Vuex中action通常是异步的，那么如何知道action什么时候结束？"></a>Vuex中action通常是异步的，那么如何知道action什么时候结束？</h5><ul><li>在action函数中返回Promise，然后再提交时候用then处理</li></ul><h5 id="谈一谈你对TCP三次握手和四次挥手的理解"><a href="#谈一谈你对TCP三次握手和四次挥手的理解" class="headerlink" title="谈一谈你对TCP三次握手和四次挥手的理解"></a>谈一谈你对TCP三次握手和四次挥手的理解</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">A： 我要挂电话了哦</span><br><span class="line">B： 等一下，我还在敷面膜</span><br><span class="line">B： 我敷玩了，现在可以挂了</span><br><span class="line">A:  我舍不得挂， 你挂吧</span><br><span class="line">B： 好吧，我挂了</span><br><span class="line">A： 等了2MSL听见嘟嘟嘟的声音后挂断了 （2MSL &#x3D;&#x3D; 4分钟  它是任何报文在网络上存在的最长时间，超过这个时间报文将被丢弃，MSL中文译为&#39;报文最大生存时间&#39;）</span><br></pre></td></tr></table></figure><h5 id="为什么http建立连接需要三次握手，不是两次或四次？"><a href="#为什么http建立连接需要三次握手，不是两次或四次？" class="headerlink" title="为什么http建立连接需要三次握手，不是两次或四次？"></a>为什么http建立连接需要三次握手，不是两次或四次？</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">三次是最少的安全次数，两次不安全，四次浪费资源</span><br></pre></td></tr></table></figure><h5 id="为什么要四次挥手"><a href="#为什么要四次挥手" class="headerlink" title="为什么要四次挥手"></a>为什么要四次挥手</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TCP是全双工信道，何为全双工就是客服端与服务端建立两条通道，通道1：客服端的输出连接服务端的输入； 通道2： 客服端的输入连接服务端的输出。 两个通道可以同时工作： 客服端向服务端发送信号的同时服务端也可以向客服端发送信号.</span><br></pre></td></tr></table></figure><h5 id="promise-（resolve【成功】，reject【拒绝】）"><a href="#promise-（resolve【成功】，reject【拒绝】）" class="headerlink" title="promise （resolve【成功】，reject【拒绝】）"></a>promise （resolve【成功】，reject【拒绝】）</h5><ul><li>是异步编程的一种解决方案，其实是一个构造函数，自己身上有all、reject、resolve这几个方法，原型上有then、catch等方法</li><li>对象的状态不受外界影响. Promise对象代表一个异步操作，有三种状态： pending（进行中）、fulfilled（已成功）、rejected（已失败）。</li><li>一旦状态改变，就不会再变，任何时候都可以得到这个结果</li></ul><h5 id="async-await"><a href="#async-await" class="headerlink" title="async / await"></a>async / await</h5><ul><li>搭配promise，可以通过编写同步的代码处理异步流程，提高代码的简洁性和可读性</li><li>1.解决了回调地狱的问题  2.支持并发执行  3.可以添加返回值return  4.可以在代码中添加try / catch捕获错误</li></ul><h5 id="Vue实现数据双向绑定的原理"><a href="#Vue实现数据双向绑定的原理" class="headerlink" title="Vue实现数据双向绑定的原理"></a>Vue实现数据双向绑定的原理</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">采用数据劫持结合发布者和订阅者模式的方式，通过Object.defineProperty()来劫持各个属性的setter、getter，在数据变动是发布消息给订阅者，触发相应监听回调。</span><br></pre></td></tr></table></figure><h5 id="你知道Vue3-x响应式数据原理吗？"><a href="#你知道Vue3-x响应式数据原理吗？" class="headerlink" title="你知道Vue3.x响应式数据原理吗？"></a>你知道Vue3.x响应式数据原理吗？</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Proxy【读  伯 乱 k谁】可以直接监听对象（直接监听对象而非属性）和数组的变化，并且有多达13种拦截方法。并且作为新标准将受到浏览器厂商重点持续的性能优化。</span><br></pre></td></tr></table></figure><h5 id="lt-keep-alive-gt-lt-keep-alive-gt-的作用是什么"><a href="#lt-keep-alive-gt-lt-keep-alive-gt-的作用是什么" class="headerlink" title="&lt;keep-alive&gt;&lt;/keep-alive&gt;的作用是什么?"></a><code>&lt;keep-alive&gt;&lt;/keep-alive&gt;</code>的作用是什么?</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">用于保留组件状态或避免重新渲染。起到一个缓存作用</span><br><span class="line">被 keep-alive 包裹的组件被缓存之后有两个独有的生命周期： activated 和 deactivated。（滴爱可的  维的）</span><br><span class="line">activated 生命周期在组件激活时调用、deactivated 生命周期在组件停用时调用。</span><br></pre></td></tr></table></figure><h5 id="computed-和-watch-的区别和运用的场景？"><a href="#computed-和-watch-的区别和运用的场景？" class="headerlink" title="computed 和 watch 的区别和运用的场景？"></a>computed 和 watch 的区别和运用的场景？</h5><ul><li><p>computed</p><ul><li><code>定义：</code>是计算属性，依赖其它属性值，并且 computed 的值有<strong>缓存</strong>，只有它<strong>依赖的属性值</strong>发生改变，下一次获取 computed 的值时才会重新计算 computed 的值；</li><li><code>应用场景：</code>进行数值计算，并依赖于其它数据,这是我们就可以用computed</li></ul></li><li><p>watch</p><ul><li><code>定义：</code>没有缓存性，更多是起到「<strong>观察</strong>」的作用，类似于某些数据的监听回调 ，每当监听的数据变化时都会执行回调进行后续操作；当我们需要深度监听对象中的属性时，可以打开deep：true选项，这样便会对对象中的每一项进行监听</li><li><code>应用场景：</code>当我们需要在数据变化时执行异步或开销较大的操作，这时我们可以选择watch</li></ul></li></ul><h5 id="为什么-v-for-和-v-if-不建议用在一起"><a href="#为什么-v-for-和-v-if-不建议用在一起" class="headerlink" title="为什么 v-for 和 v-if 不建议用在一起"></a>为什么 v-for 和 v-if 不建议用在一起</h5><ul><li>当 v-for 和 v-if 处于同一个节点时，v-for 的优先级比 v-if 更高，这意味着 v-if 将分别重复运行于每个 v-for 循环中。</li><li>如果要遍历的数组很大，而真正要展示的数据很少时，这将造成很大的性能浪费</li><li>这种场景建议使用 computed，先对数据进行过滤</li></ul><h5 id="组件中的data为什么是一个函数？"><a href="#组件中的data为什么是一个函数？" class="headerlink" title="组件中的data为什么是一个函数？"></a>组件中的data为什么是一个函数？</h5><ul><li>如果data是对象的话，对象属于引用类型，会影响到所有的实例。所以为了保证组件不同的实例之间data不冲突，data必须是一个函数。</li></ul><h5 id="子组件为什么不可以修改父组件传递的Prop？-怎么理解vue的单向数据流？"><a href="#子组件为什么不可以修改父组件传递的Prop？-怎么理解vue的单向数据流？" class="headerlink" title="子组件为什么不可以修改父组件传递的Prop？/怎么理解vue的单向数据流？"></a>子组件为什么不可以修改父组件传递的Prop？/怎么理解vue的单向数据流？</h5><ul><li>Vue提倡单向数据流，如果破坏了单向数据流，当应用复杂时，debug 的成本会非常高。</li></ul><h5 id="v-model是如何实现双向绑定的？"><a href="#v-model是如何实现双向绑定的？" class="headerlink" title="v-model是如何实现双向绑定的？"></a>v-model是如何实现双向绑定的？</h5><ul><li>v-model是用来在表单控件或者组件上创建双向绑定的</li><li>它本质是v-bind和v-on的语法糖</li></ul><h5 id="vue的生命周期"><a href="#vue的生命周期" class="headerlink" title="vue的生命周期"></a>vue的生命周期</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue实例有一个完整的生命周期，也就是从开始创建、初始化数据、编译模板、挂载Dom、渲染→更新→渲染、销毁等一系列过程</span><br></pre></td></tr></table></figure><h5 id="虚拟-DOM-实现原理？"><a href="#虚拟-DOM-实现原理？" class="headerlink" title="虚拟 DOM 实现原理？"></a>虚拟 DOM 实现原理？</h5><ul><li>用 JavaScript 对象模拟真实 DOM 树，对真实 DOM 进行抽象；</li><li>diff 算法 — 比较两棵虚拟 DOM 树的差异；</li><li>pach 算法 — 将两个虚拟 DOM 对象的差异应用到真正的 DOM 树。</li></ul><h5 id="虚拟DOM的优缺点"><a href="#虚拟DOM的优缺点" class="headerlink" title="虚拟DOM的优缺点"></a>虚拟DOM的优缺点</h5><ul><li><p>优点</p><ul><li>保证性能下限</li><li>无需手动操作 DOM</li><li>跨平台</li></ul></li><li><p>缺点</p><ul><li>无法进行极致优化</li></ul></li></ul><h5 id="nextTick的实现原理是什么？"><a href="#nextTick的实现原理是什么？" class="headerlink" title="nextTick的实现原理是什么？"></a>nextTick的实现原理是什么？</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在下次 DOM 更新循环结束之后执行延迟回调，在修改数据之后立即使用 nextTick 来获取更新后的 DOM。</span><br></pre></td></tr></table></figure><h5 id="Vue-怎么用-vm-set-解决对象新增属性不能响应的问题-？"><a href="#Vue-怎么用-vm-set-解决对象新增属性不能响应的问题-？" class="headerlink" title="Vue 怎么用 vm.$set() 解决对象新增属性不能响应的问题 ？"></a>Vue 怎么用 vm.$set() 解决对象新增属性不能响应的问题 ？</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">受现代 JavaScript 的限制 ，Vue 无法检测到对象属性的添加或删除。由于 Vue 会在初始化实例时对属性执行 getter&#x2F;setter 转化，所以属性必须在 data 对象上存在才能让 Vue 将它转换为响应式的。但是 Vue 提供了 Vue.set (object, propertyName, value) &#x2F; vm.$set (object, propertyName, value)  来实现为对象添加响应式属性</span><br></pre></td></tr></table></figure><h5 id="Vue-中的-key-有什么作用？"><a href="#Vue-中的-key-有什么作用？" class="headerlink" title="Vue 中的 key 有什么作用？"></a>Vue 中的 key 有什么作用？</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">key 是为 Vue 中 vnode 的唯一标记，通过这个 key，我们的 diff算法 操作可以更准确、更快速</span><br></pre></td></tr></table></figure><h5 id="为什么不建议用index作为key"><a href="#为什么不建议用index作为key" class="headerlink" title="为什么不建议用index作为key?"></a>为什么不建议用index作为key?</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">不建议 用index 作为 key，和没写基本上没区别，因为不管你数组的顺序怎么颠倒，index 都是 0, 1, 2 这样排列，导致 Vue 会复用错误的旧子节点，做很多额外的工作</span><br></pre></td></tr></table></figure><h5 id="在什么阶段才能访问操作DOM？"><a href="#在什么阶段才能访问操作DOM？" class="headerlink" title="在什么阶段才能访问操作DOM？"></a>在什么阶段才能访问操作DOM？</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在 mounted 中可以访问操作 DOM。</span><br></pre></td></tr></table></figure><h5 id="Vue事件绑定原理是什么？"><a href="#Vue事件绑定原理是什么？" class="headerlink" title="Vue事件绑定原理是什么？"></a>Vue事件绑定原理是什么？</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">原生事件绑定是通过addEventListener绑定给真实元素的，组件事件绑定是通过Vue自定义的$on实现的。</span><br></pre></td></tr></table></figure><h5 id="Vue中组件生命周期调用顺序是什么样的？"><a href="#Vue中组件生命周期调用顺序是什么样的？" class="headerlink" title="Vue中组件生命周期调用顺序是什么样的？"></a>Vue中组件生命周期调用顺序是什么样的？</h5><ul><li>组件的调用顺序都是先父后子,渲染完成的顺序是先子后父。</li><li>组件的销毁操作是先父后子，销毁完成的顺序是先子后父。</li></ul><h5 id="你的接口请求一般放在哪个生命周期中？"><a href="#你的接口请求一般放在哪个生命周期中？" class="headerlink" title="你的接口请求一般放在哪个生命周期中？"></a>你的接口请求一般放在哪个生命周期中？</h5><ul><li>可以在钩子函数 created、beforeMount、mounted 中进行调用，因为在这三个钩子函数中，data 已经创建，可以将服务端端返回的数据进行赋值。</li><li>但是推荐在 created 钩子函数中调用异步请求，能更快获取到服务端数据，减少页面loading 时间；</li></ul><h5 id="vue路由hash模式和history模式实现原理分别是什么，他们的区别是什么？"><a href="#vue路由hash模式和history模式实现原理分别是什么，他们的区别是什么？" class="headerlink" title="vue路由hash模式和history模式实现原理分别是什么，他们的区别是什么？"></a>vue路由hash模式和history模式实现原理分别是什么，他们的区别是什么？</h5><ul><li><p>实现原理</p><ul><li><p>hash模式</p><ul><li>后面 hash 值的变化，不会导致浏览器向服务器发出请求，浏览器不发出请求，就不会刷新页面</li></ul></li><li><p>history模式</p><ul><li>history 模式的实现，主要是 HTML5 标准发布的两个 API，<strong>pushState</strong> 和 <strong>replaceState</strong>，这两个 API 可以在改变 url，但是不会发送请求。这样就可以监听 url 变化来实现更新页面部分内容的操作</li></ul></li></ul></li><li><p>区别</p><ul><li>url 展示上，hash 模式有“#”，history 模式没有</li><li>刷新页面时，hash 模式可以正常加载到 hash 值对应的页面，而 history 没有处理的话，会返回 404，一般需要后端将所有页面都配置重定向到首页路由</li><li>兼容性，hash 可以支持低版本浏览器和 IE。</li></ul></li></ul><h5 id="路由懒加载是什么意思？如何实现路由懒加载？"><a href="#路由懒加载是什么意思？如何实现路由懒加载？" class="headerlink" title="路由懒加载是什么意思？如何实现路由懒加载？"></a>路由懒加载是什么意思？如何实现路由懒加载？</h5><ul><li>定义： 把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件</li><li>实现：结合 Vue 的异步组件和 Webpack 的代码分割功能</li></ul><h5 id="Vue-router-导航守卫有哪些"><a href="#Vue-router-导航守卫有哪些" class="headerlink" title="Vue-router 导航守卫有哪些"></a>Vue-router 导航守卫有哪些</h5><ul><li>全局前置/钩子：beforeEach、beforeResolve、afterEach</li><li>路由独享的守卫：beforeEnter</li><li>组件内的守卫：beforeRouteEnter、beforeRouteUpdate、beforeRouteLeave</li></ul><h5 id="vue路由的钩子函数"><a href="#vue路由的钩子函数" class="headerlink" title="vue路由的钩子函数"></a>vue路由的钩子函数</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">首页可以控制导航跳转，beforeEach，afterEach等，一般用于页面title的修改。一些需要登录才能调整页面的重定向功能。</span><br><span class="line">beforeEach主要有3个参数to，from，next。</span><br><span class="line">to：route即将进入的目标路由对象。</span><br><span class="line">from：route当前导航正要离开的路由。</span><br><span class="line">next：function一定要调用该方法resolve这个钩子。执行效果依赖next方法的调用参数。可以控制网页的跳转</span><br></pre></td></tr></table></figure><h5 id="什么是-mixin-？"><a href="#什么是-mixin-？" class="headerlink" title="什么是 mixin ？"></a>什么是 mixin ？</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mixin 使我们能够为 Vue 组件编写可插拔和可重用的功能。</span><br></pre></td></tr></table></figure><h5 id="在-Vue-实例中编写生命周期-hook-或其他-option-properties-时，为什么不使用箭头函数-？"><a href="#在-Vue-实例中编写生命周期-hook-或其他-option-properties-时，为什么不使用箭头函数-？" class="headerlink" title="在 Vue 实例中编写生命周期 hook 或其他 option/properties 时，为什么不使用箭头函数 ？"></a>在 Vue 实例中编写生命周期 hook 或其他 option/properties 时，为什么不使用箭头函数 ？</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">箭头函数自已没有定义 this 。</span><br></pre></td></tr></table></figure><h5 id="Vue模版编译原理知道吗，能简单说一下吗？"><a href="#Vue模版编译原理知道吗，能简单说一下吗？" class="headerlink" title="Vue模版编译原理知道吗，能简单说一下吗？"></a>Vue模版编译原理知道吗，能简单说一下吗？</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">简单说，Vue的编译过程就是将template转化为render函数的过程。</span><br></pre></td></tr></table></figure><h5 id="diff算法说一下"><a href="#diff算法说一下" class="headerlink" title="diff算法说一下"></a>diff算法说一下</h5><ul><li>同级比较，再比较子节点</li><li>先判断一方有子节点一方没有子节点的情况(如果新的children没有子节点，将旧的子节点移除)</li></ul><h5 id="说说你对SSR的了解"><a href="#说说你对SSR的了解" class="headerlink" title="说说你对SSR的了解"></a>说说你对SSR的了解</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SSR也就是服务端渲染，也就是将Vue在客户端把标签渲染成HTML的工作放在服务端完成，然后再把html直接返回给客户端</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>S6常见处理数据的方法</title>
      <link href="2020/10/08/webstud/"/>
      <url>2020/10/08/webstud/</url>
      
        <content type="html"><![CDATA[<h3 id="Array-新增的原型对象方法上有个-fill-的-API"><a href="#Array-新增的原型对象方法上有个-fill-的-API" class="headerlink" title="Array 新增的原型对象方法上有个 fill 的 API"></a>Array 新增的原型对象方法上有个 fill 的 API</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const arr = Array(5).fill(0)</span><br></pre></td></tr></table></figure><h3 id="includes-判断是否包含然后直接返回布尔值"><a href="#includes-判断是否包含然后直接返回布尔值" class="headerlink" title="includes**:**判断是否包含然后直接返回布尔值"></a>includes**:**判断是否包含然后直接返回布尔值</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const str = <span class="string">&#x27;hahay&#x27;</span></span><br><span class="line">console.log(str.includes(<span class="string">&#x27;h&#x27;</span>)) // <span class="literal">true</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo+github 搭建个人博客</title>
      <link href="2020/10/08/hello-world/"/>
      <url>2020/10/08/hello-world/</url>
      
        <content type="html"><![CDATA[<h3 id="Hexo-是一个快速、简洁且高效的博客框架。Hexo-使用-Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。"><a href="#Hexo-是一个快速、简洁且高效的博客框架。Hexo-使用-Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。" class="headerlink" title="Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。"></a>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</h3><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
